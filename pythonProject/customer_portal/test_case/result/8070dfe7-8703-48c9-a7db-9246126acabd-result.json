{"name": "test_check_insured_gender", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"igloo-pa-header-menu-btn false\">...</div> is not clickable at point (569, 28). Other element would receive the click: <div class=\"ant-spin ant-spin-lg ant-spin-spinning\">...</div>\n  (Session info: chrome=96.0.4664.55)\nStacktrace:\n0   chromedriver                        0x000000010c60ebc9 __gxx_personality_v0 + 573977\n1   chromedriver                        0x000000010c59b9a3 __gxx_personality_v0 + 102387\n2   chromedriver                        0x000000010c15d488 chromedriver + 173192\n3   chromedriver                        0x000000010c199df0 chromedriver + 421360\n4   chromedriver                        0x000000010c19791f chromedriver + 411935\n5   chromedriver                        0x000000010c19511a chromedriver + 401690\n6   chromedriver                        0x000000010c193b52 chromedriver + 396114\n7   chromedriver                        0x000000010c187a68 chromedriver + 346728\n8   chromedriver                        0x000000010c1afd52 chromedriver + 511314\n9   chromedriver                        0x000000010c1877f5 chromedriver + 346101\n10  chromedriver                        0x000000010c1affce chromedriver + 511950\n11  chromedriver                        0x000000010c1c2961 chromedriver + 588129\n12  chromedriver                        0x000000010c1aff73 chromedriver + 511859\n13  chromedriver                        0x000000010c1860e0 chromedriver + 340192\n14  chromedriver                        0x000000010c187345 chromedriver + 344901\n15  chromedriver                        0x000000010c5cbd5f __gxx_personality_v0 + 299951\n16  chromedriver                        0x000000010c5e28db __gxx_personality_v0 + 393003\n17  chromedriver                        0x000000010c5e885f __gxx_personality_v0 + 417455\n18  chromedriver                        0x000000010c5e400a __gxx_personality_v0 + 398938\n19  chromedriver                        0x000000010c5c095c __gxx_personality_v0 + 253868\n20  chromedriver                        0x000000010c5ff198 __gxx_personality_v0 + 509928\n21  chromedriver                        0x000000010c5ff321 __gxx_personality_v0 + 510321\n22  chromedriver                        0x000000010c616108 __gxx_personality_v0 + 603992\n23  libsystem_pthread.dylib             0x00007fff204f18fc _pthread_start + 224\n24  libsystem_pthread.dylib             0x00007fff204ed443 thread_start + 15", "trace": "self = <customer_portal.test_case.test_case.TestClaimList object at 0x7fdda46cb8b0>\n\n    @allure.story(\"check insured gender\")\n    def test_check_insured_gender(self):\n        self.claim_id = \"HC-MICI-48440846\"\n        self.type = \"Insured’s Details\"\n        self.item = \"Gender\"\n        self.content = \"Male\"\n    \n        main = PolicyPage()\n>       content = main.goto_claim_list().goto_claim_detail(self.claim_id).check_insured_detail(self.type,self.item)\n\ntest_case.py:281: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../page_object/policy_page.py:138: in goto_claim_list\n    self.find_and_click(*ele_claim_list)\n../page_object/base_page.py:80: in find_and_click\n    return self.driver.find_element(by, value).click()\n../../../../PycharmProjects/pythonProject/venv/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../../PycharmProjects/pythonProject/venv/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n../../../../PycharmProjects/pythonProject/venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fdda5a4a4f0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...fff204f18fc _pthread_start + 224\\\\n24  libsystem_pthread.dylib             0x00007fff204ed443 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"igloo-pa-header-menu-btn false\">...</div> is not clickable at point (569, 28). Other element would receive the click: <div class=\"ant-spin ant-spin-lg ant-spin-spinning\">...</div>\nE         (Session info: chrome=96.0.4664.55)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010c60ebc9 __gxx_personality_v0 + 573977\nE       1   chromedriver                        0x000000010c59b9a3 __gxx_personality_v0 + 102387\nE       2   chromedriver                        0x000000010c15d488 chromedriver + 173192\nE       3   chromedriver                        0x000000010c199df0 chromedriver + 421360\nE       4   chromedriver                        0x000000010c19791f chromedriver + 411935\nE       5   chromedriver                        0x000000010c19511a chromedriver + 401690\nE       6   chromedriver                        0x000000010c193b52 chromedriver + 396114\nE       7   chromedriver                        0x000000010c187a68 chromedriver + 346728\nE       8   chromedriver                        0x000000010c1afd52 chromedriver + 511314\nE       9   chromedriver                        0x000000010c1877f5 chromedriver + 346101\nE       10  chromedriver                        0x000000010c1affce chromedriver + 511950\nE       11  chromedriver                        0x000000010c1c2961 chromedriver + 588129\nE       12  chromedriver                        0x000000010c1aff73 chromedriver + 511859\nE       13  chromedriver                        0x000000010c1860e0 chromedriver + 340192\nE       14  chromedriver                        0x000000010c187345 chromedriver + 344901\nE       15  chromedriver                        0x000000010c5cbd5f __gxx_personality_v0 + 299951\nE       16  chromedriver                        0x000000010c5e28db __gxx_personality_v0 + 393003\nE       17  chromedriver                        0x000000010c5e885f __gxx_personality_v0 + 417455\nE       18  chromedriver                        0x000000010c5e400a __gxx_personality_v0 + 398938\nE       19  chromedriver                        0x000000010c5c095c __gxx_personality_v0 + 253868\nE       20  chromedriver                        0x000000010c5ff198 __gxx_personality_v0 + 509928\nE       21  chromedriver                        0x000000010c5ff321 __gxx_personality_v0 + 510321\nE       22  chromedriver                        0x000000010c616108 __gxx_personality_v0 + 603992\nE       23  libsystem_pthread.dylib             0x00007fff204f18fc _pthread_start + 224\nE       24  libsystem_pthread.dylib             0x00007fff204ed443 thread_start + 15\n\n../../../../PycharmProjects/pythonProject/venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementClickInterceptedException"}, "start": 1638522681180, "stop": 1638522695630, "uuid": "8fd6dda9-cb7b-495d-ae90-5f1b229d7676", "historyId": "b5a64e0f5665814f1d5966356a750209", "testCaseId": "4ed4ee2f3742e8ed4bec3538f4e6d73e", "fullName": "test_case.TestClaimList#test_check_insured_gender", "labels": [{"name": "story", "value": "check insured gender"}, {"name": "feature", "value": "claim list页面功能"}, {"name": "suite", "value": "test_case"}, {"name": "subSuite", "value": "TestClaimList"}, {"name": "host", "value": "xiongjundeMBP.lan"}, {"name": "thread", "value": "20384-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case"}]}